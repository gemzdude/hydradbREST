package io.pivotal.gemfire.toolsmiths.hdbr.data.gen.db;

import io.pivotal.gemfire.toolsmiths.hdbr.data.gen.DunitTestMethodDetail;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;

//import com.nurkiewicz.jdbcrepository.RowUnmapper;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class DunitTestMethodDetailDB
{

	private static String TABLE_NAME = "DUNIT_TEST_METHOD_DETAIL";

	private static String TABLE_ALIAS = "dtmd";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ID("id"),
		METHOD_ID("method_id"),
		STATUS("status"),
		ERROR("error"),
		RUN_ID("run_id"),
		TIME("time"),
		TOOKMS("tookms"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public DunitTestMethodDetailDB ()
	{

	}

	public static final RowMapper<DunitTestMethodDetail> ROW_MAPPER = new DunitTestMethodDetailRowMapper ();
	public static final class  DunitTestMethodDetailRowMapper implements RowMapper<DunitTestMethodDetail>
	{
		public DunitTestMethodDetail mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			DunitTestMethodDetail obj = new DunitTestMethodDetail();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnName()));
			obj.setMethodId(rs.getInt(COLUMNS.METHOD_ID.getColumnName()));
			obj.setStatus(rs.getString(COLUMNS.STATUS.getColumnName()));
			obj.setError(rs.getString(COLUMNS.ERROR.getColumnName()));
			obj.setRunId(rs.getInt(COLUMNS.RUN_ID.getColumnName()));
			obj.setTime(rs.getTimestamp(COLUMNS.TIME.getColumnName()));
			obj.setTookms(rs.getLong(COLUMNS.TOOKMS.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<DunitTestMethodDetail> ROW_UNMAPPER = new DunitTestMethodDetailRowUnmapper ();
	public static final class DunitTestMethodDetailRowUnmapper implements RowUnmapper<DunitTestMethodDetail>
	{
		public Map<String, Object> mapColumns(DunitTestMethodDetail dunittestmethoddetail)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.ID.getColumnName(), dunittestmethoddetail.getId());
			mapping.put(COLUMNS.METHOD_ID.getColumnName(), dunittestmethoddetail.getMethodId());
			mapping.put(COLUMNS.STATUS.getColumnName(), dunittestmethoddetail.getStatus());
			mapping.put(COLUMNS.ERROR.getColumnName(), dunittestmethoddetail.getError());
			mapping.put(COLUMNS.RUN_ID.getColumnName(), dunittestmethoddetail.getRunId());
			if (dunittestmethoddetail.getTime() != null)
				mapping.put(COLUMNS.TIME.getColumnName(), new Timestamp (dunittestmethoddetail.getTime().getTime()));
			mapping.put(COLUMNS.TOOKMS.getColumnName(), dunittestmethoddetail.getTookms());
			return mapping;
		}
	}

	public static final RowMapper<DunitTestMethodDetail> ALIAS_ROW_MAPPER = new DunitTestMethodDetailAliasRowMapper ();
	public static final class  DunitTestMethodDetailAliasRowMapper implements RowMapper<DunitTestMethodDetail>
	{
		private boolean loadAllFKeys = false;
		public void setLoadAllFKeys (boolean loadAllFKeys)
		{
			this.loadAllFKeys = loadAllFKeys;
		}

		private boolean loadRun = false;
		public void setLoadRun (boolean loadRun)
		{
			this.loadRun = loadRun;
		}

		public DunitTestMethodDetail mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			DunitTestMethodDetail obj = new DunitTestMethodDetail();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnAliasName()));
			obj.setMethodId(rs.getInt(COLUMNS.METHOD_ID.getColumnAliasName()));
			obj.setStatus(rs.getString(COLUMNS.STATUS.getColumnAliasName()));
			obj.setError(rs.getString(COLUMNS.ERROR.getColumnAliasName()));
			obj.setRunId(rs.getInt(COLUMNS.RUN_ID.getColumnAliasName()));
			obj.setTime(rs.getTimestamp(COLUMNS.TIME.getColumnAliasName()));
			obj.setTookms(rs.getLong(COLUMNS.TOOKMS.getColumnAliasName()));
			if (this.loadAllFKeys || this.loadRun)
				obj.setRun(DunitRunDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}