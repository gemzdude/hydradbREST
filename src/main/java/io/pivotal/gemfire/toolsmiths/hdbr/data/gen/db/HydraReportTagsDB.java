package io.pivotal.gemfire.toolsmiths.hdbr.data.gen.db;

import io.pivotal.gemfire.toolsmiths.hdbr.data.gen.HydraReportTags;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.Map;

//import com.nurkiewicz.jdbcrepository.RowUnmapper;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class HydraReportTagsDB
{

	private static String TABLE_NAME = "HYDRA_REPORT_TAGS";

	private static String TABLE_ALIAS = "hrt";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ID("id"),
		TAG_NAME("tag_name"),
		TAG_VALUE("tag_value"),
		ACTIVE("active"),
		DISPLAY_TEXT("display_text"),
		PRIORITY("priority"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public HydraReportTagsDB ()
	{

	}

	public static final RowMapper<HydraReportTags> ROW_MAPPER = new HydraReportTagsRowMapper ();
	public static final class  HydraReportTagsRowMapper implements RowMapper<HydraReportTags>
	{
		public HydraReportTags mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			HydraReportTags obj = new HydraReportTags();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnName()));
			obj.setTagName(rs.getString(COLUMNS.TAG_NAME.getColumnName()));
			obj.setTagValue(rs.getString(COLUMNS.TAG_VALUE.getColumnName()));
			obj.setActive(rs.getBoolean(COLUMNS.ACTIVE.getColumnName()));
			obj.setDisplayText(rs.getString(COLUMNS.DISPLAY_TEXT.getColumnName()));
			obj.setPriority(rs.getInt(COLUMNS.PRIORITY.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<HydraReportTags> ROW_UNMAPPER = new HydraReportTagsRowUnmapper ();
	public static final class HydraReportTagsRowUnmapper implements RowUnmapper<HydraReportTags>
	{
		public Map<String, Object> mapColumns(HydraReportTags hydrareporttags)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.ID.getColumnName(), hydrareporttags.getId());
			mapping.put(COLUMNS.TAG_NAME.getColumnName(), hydrareporttags.getTagName());
			mapping.put(COLUMNS.TAG_VALUE.getColumnName(), hydrareporttags.getTagValue());
			mapping.put(COLUMNS.ACTIVE.getColumnName(), hydrareporttags.getActive());
			mapping.put(COLUMNS.DISPLAY_TEXT.getColumnName(), hydrareporttags.getDisplayText());
			mapping.put(COLUMNS.PRIORITY.getColumnName(), hydrareporttags.getPriority());
			return mapping;
		}
	}

	public static final RowMapper<HydraReportTags> ALIAS_ROW_MAPPER = new HydraReportTagsAliasRowMapper ();
	public static final class  HydraReportTagsAliasRowMapper implements RowMapper<HydraReportTags>
	{
		public HydraReportTags mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			HydraReportTags obj = new HydraReportTags();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnAliasName()));
			obj.setTagName(rs.getString(COLUMNS.TAG_NAME.getColumnAliasName()));
			obj.setTagValue(rs.getString(COLUMNS.TAG_VALUE.getColumnAliasName()));
			obj.setActive(rs.getBoolean(COLUMNS.ACTIVE.getColumnAliasName()));
			obj.setDisplayText(rs.getString(COLUMNS.DISPLAY_TEXT.getColumnAliasName()));
			obj.setPriority(rs.getInt(COLUMNS.PRIORITY.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}