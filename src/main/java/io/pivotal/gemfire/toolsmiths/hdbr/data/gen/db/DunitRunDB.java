package io.pivotal.gemfire.toolsmiths.hdbr.data.gen.db;

import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import java.sql.ResultSet;
import java.util.LinkedHashMap;
import java.util.Map;
import io.pivotal.gemfire.toolsmiths.hdbr.data.RowUnmapper;
import io.pivotal.gemfire.toolsmiths.hdbr.data.gen.DunitRun;
import java.sql.Timestamp;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class DunitRunDB
{

	private static String TABLE_NAME = "DUNIT_RUN";

	private static String TABLE_ALIAS = "dr";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ID("id"),
		USER_NAME("user_name"),
		PATH("path"),
		SITES("sites"),
		RUNTIME_ENV("runtime_env"),
		BASE_ENV("base_env"),
		REVISION("revision"),
		BRANCH("branch"),
		OS_NAME("os_name"),
		OS_VERSION("os_version"),
		JAVA_VERSION("java_version"),
		JAVA_VM_VERSION("java_vm_version"),
		JAVA_VM_VENDOR("java_vm_vendor"),
		TIME("time"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public DunitRunDB ()
	{

	}

	public static final RowMapper<DunitRun> ROW_MAPPER = new DunitRunRowMapper ();
	public static final class  DunitRunRowMapper implements RowMapper<DunitRun>
	{
		public DunitRun mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			DunitRun obj = new DunitRun();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnName()));
			obj.setUserName(rs.getString(COLUMNS.USER_NAME.getColumnName()));
			obj.setPath(rs.getString(COLUMNS.PATH.getColumnName()));
			obj.setSites(rs.getInt(COLUMNS.SITES.getColumnName()));
			obj.setRuntimeEnv(rs.getInt(COLUMNS.RUNTIME_ENV.getColumnName()));
			obj.setBaseEnv(rs.getInt(COLUMNS.BASE_ENV.getColumnName()));
			obj.setRevision(rs.getString(COLUMNS.REVISION.getColumnName()));
			obj.setBranch(rs.getString(COLUMNS.BRANCH.getColumnName()));
			obj.setOsName(rs.getString(COLUMNS.OS_NAME.getColumnName()));
			obj.setOsVersion(rs.getString(COLUMNS.OS_VERSION.getColumnName()));
			obj.setJavaVersion(rs.getString(COLUMNS.JAVA_VERSION.getColumnName()));
			obj.setJavaVmVersion(rs.getString(COLUMNS.JAVA_VM_VERSION.getColumnName()));
			obj.setJavaVmVendor(rs.getString(COLUMNS.JAVA_VM_VENDOR.getColumnName()));
			obj.setTime(rs.getTimestamp(COLUMNS.TIME.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<DunitRun> ROW_UNMAPPER = new DunitRunRowUnmapper ();
	public static final class DunitRunRowUnmapper implements RowUnmapper<DunitRun>
	{
		public Map<String, Object> mapColumns(DunitRun dunitrun)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.ID.getColumnName(), dunitrun.getId());
			mapping.put(COLUMNS.USER_NAME.getColumnName(), dunitrun.getUserName());
			mapping.put(COLUMNS.PATH.getColumnName(), dunitrun.getPath());
			mapping.put(COLUMNS.SITES.getColumnName(), dunitrun.getSites());
			mapping.put(COLUMNS.RUNTIME_ENV.getColumnName(), dunitrun.getRuntimeEnv());
			mapping.put(COLUMNS.BASE_ENV.getColumnName(), dunitrun.getBaseEnv());
			mapping.put(COLUMNS.REVISION.getColumnName(), dunitrun.getRevision());
			mapping.put(COLUMNS.BRANCH.getColumnName(), dunitrun.getBranch());
			mapping.put(COLUMNS.OS_NAME.getColumnName(), dunitrun.getOsName());
			mapping.put(COLUMNS.OS_VERSION.getColumnName(), dunitrun.getOsVersion());
			mapping.put(COLUMNS.JAVA_VERSION.getColumnName(), dunitrun.getJavaVersion());
			mapping.put(COLUMNS.JAVA_VM_VERSION.getColumnName(), dunitrun.getJavaVmVersion());
			mapping.put(COLUMNS.JAVA_VM_VENDOR.getColumnName(), dunitrun.getJavaVmVendor());
			if (dunitrun.getTime() != null)
				mapping.put(COLUMNS.TIME.getColumnName(), new Timestamp (dunitrun.getTime().getTime()));
			return mapping;
		}
	}

	public static final RowMapper<DunitRun> ALIAS_ROW_MAPPER = new DunitRunAliasRowMapper ();
	public static final class  DunitRunAliasRowMapper implements RowMapper<DunitRun>
	{
		public DunitRun mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			DunitRun obj = new DunitRun();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnAliasName()));
			obj.setUserName(rs.getString(COLUMNS.USER_NAME.getColumnAliasName()));
			obj.setPath(rs.getString(COLUMNS.PATH.getColumnAliasName()));
			obj.setSites(rs.getInt(COLUMNS.SITES.getColumnAliasName()));
			obj.setRuntimeEnv(rs.getInt(COLUMNS.RUNTIME_ENV.getColumnAliasName()));
			obj.setBaseEnv(rs.getInt(COLUMNS.BASE_ENV.getColumnAliasName()));
			obj.setRevision(rs.getString(COLUMNS.REVISION.getColumnAliasName()));
			obj.setBranch(rs.getString(COLUMNS.BRANCH.getColumnAliasName()));
			obj.setOsName(rs.getString(COLUMNS.OS_NAME.getColumnAliasName()));
			obj.setOsVersion(rs.getString(COLUMNS.OS_VERSION.getColumnAliasName()));
			obj.setJavaVersion(rs.getString(COLUMNS.JAVA_VERSION.getColumnAliasName()));
			obj.setJavaVmVersion(rs.getString(COLUMNS.JAVA_VM_VERSION.getColumnAliasName()));
			obj.setJavaVmVendor(rs.getString(COLUMNS.JAVA_VM_VENDOR.getColumnAliasName()));
			obj.setTime(rs.getTimestamp(COLUMNS.TIME.getColumnAliasName()));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}