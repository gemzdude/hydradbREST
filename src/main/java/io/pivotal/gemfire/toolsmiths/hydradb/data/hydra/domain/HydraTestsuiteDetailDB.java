package io.pivotal.gemfire.toolsmiths.hydradb.data.hydra.domain;

import io.pivotal.gemfire.toolsmiths.hydradb.data.RowUnmapper;
import io.pivotal.gemfire.toolsmiths.hydradb.data.hydra.HydraTestsuiteDetail;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class HydraTestsuiteDetailDB
{

	private static String TABLE_NAME = "HYDRA_TESTSUITE_DETAIL";

	private static String TABLE_ALIAS = "htd";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ID("id"),
		DATE("date"),
		ELAPSED_TIME("elapsed_time"),
		DISK_USAGE("disk_usage"),
		PASSCOUNT("passcount"),
		FAILCOUNT("failcount"),
		HANGCOUNT("hangcount"),
		LOCAL_CONF("local_conf"),
		HYDRA_TESTSUITE_ID("hydra_testsuite_id"),
		HYDRA_RUN_ID("hydra_run_id"),
		HOST_ID("host_id"),
		COMMENT("comment"),
		ARTIFACT_LOCATION("artifact_location"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public HydraTestsuiteDetailDB ()
	{

	}

	public static final RowMapper<HydraTestsuiteDetail> ROW_MAPPER = new HydraTestsuiteDetailRowMapper ();
	public static final class  HydraTestsuiteDetailRowMapper implements RowMapper<HydraTestsuiteDetail>
	{
		public HydraTestsuiteDetail mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			HydraTestsuiteDetail obj = new HydraTestsuiteDetail();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnName()));
			obj.setDate(rs.getTimestamp(COLUMNS.DATE.getColumnName()));
			obj.setElapsedTime(rs.getString(COLUMNS.ELAPSED_TIME.getColumnName()));
			obj.setDiskUsage(rs.getString(COLUMNS.DISK_USAGE.getColumnName()));
			obj.setPasscount(rs.getInt(COLUMNS.PASSCOUNT.getColumnName()));
			obj.setFailcount(rs.getInt(COLUMNS.FAILCOUNT.getColumnName()));
			obj.setHangcount(rs.getInt(COLUMNS.HANGCOUNT.getColumnName()));
			obj.setLocalConf(rs.getString(COLUMNS.LOCAL_CONF.getColumnName()));
			obj.setHydraTestsuiteId(rs.getInt(COLUMNS.HYDRA_TESTSUITE_ID.getColumnName()));
			obj.setHydraRunId(rs.getInt(COLUMNS.HYDRA_RUN_ID.getColumnName()));
			obj.setHostId(rs.getInt(COLUMNS.HOST_ID.getColumnName()));
			obj.setComment(rs.getString(COLUMNS.COMMENT.getColumnName()));
			obj.setArtifactLocation(rs.getString(COLUMNS.ARTIFACT_LOCATION.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<HydraTestsuiteDetail> ROW_UNMAPPER = new HydraTestsuiteDetailRowUnmapper ();
	public static final class HydraTestsuiteDetailRowUnmapper implements RowUnmapper<HydraTestsuiteDetail>
	{
		public Map<String, Object> mapColumns(HydraTestsuiteDetail hydratestsuitedetail)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.ID.getColumnName(), hydratestsuitedetail.getId());
			if (hydratestsuitedetail.getDate() != null)
				mapping.put(COLUMNS.DATE.getColumnName(), new Timestamp (hydratestsuitedetail.getDate().getTime()));
			mapping.put(COLUMNS.ELAPSED_TIME.getColumnName(), hydratestsuitedetail.getElapsedTime());
			mapping.put(COLUMNS.DISK_USAGE.getColumnName(), hydratestsuitedetail.getDiskUsage());
			mapping.put(COLUMNS.PASSCOUNT.getColumnName(), hydratestsuitedetail.getPasscount());
			mapping.put(COLUMNS.FAILCOUNT.getColumnName(), hydratestsuitedetail.getFailcount());
			mapping.put(COLUMNS.HANGCOUNT.getColumnName(), hydratestsuitedetail.getHangcount());
			mapping.put(COLUMNS.LOCAL_CONF.getColumnName(), hydratestsuitedetail.getLocalConf());
			mapping.put(COLUMNS.HYDRA_TESTSUITE_ID.getColumnName(), hydratestsuitedetail.getHydraTestsuiteId());
			mapping.put(COLUMNS.HYDRA_RUN_ID.getColumnName(), hydratestsuitedetail.getHydraRunId());
			mapping.put(COLUMNS.HOST_ID.getColumnName(), hydratestsuitedetail.getHostId());
			mapping.put(COLUMNS.COMMENT.getColumnName(), hydratestsuitedetail.getComment());
			mapping.put(COLUMNS.ARTIFACT_LOCATION.getColumnName(), hydratestsuitedetail.getArtifactLocation());
			return mapping;
		}
	}

	public static final RowMapper<HydraTestsuiteDetail> ALIAS_ROW_MAPPER = new HydraTestsuiteDetailAliasRowMapper ();
	public static final class  HydraTestsuiteDetailAliasRowMapper implements RowMapper<HydraTestsuiteDetail>
	{
		private boolean loadAllFKeys = false;
		public void setLoadAllFKeys (boolean loadAllFKeys)
		{
			this.loadAllFKeys = loadAllFKeys;
		}

		private boolean loadHost = false;
		public void setLoadHost (boolean loadHost)
		{
			this.loadHost = loadHost;
		}

		private boolean loadHydraRun = false;
		public void setLoadHydraRun (boolean loadHydraRun)
		{
			this.loadHydraRun = loadHydraRun;
		}

		private boolean loadHydraTestsuite = false;
		public void setLoadHydraTestsuite (boolean loadHydraTestsuite)
		{
			this.loadHydraTestsuite = loadHydraTestsuite;
		}

		public HydraTestsuiteDetail mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			HydraTestsuiteDetail obj = new HydraTestsuiteDetail();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnAliasName()));
			obj.setDate(rs.getTimestamp(COLUMNS.DATE.getColumnAliasName()));
			obj.setElapsedTime(rs.getString(COLUMNS.ELAPSED_TIME.getColumnAliasName()));
			obj.setDiskUsage(rs.getString(COLUMNS.DISK_USAGE.getColumnAliasName()));
			obj.setPasscount(rs.getInt(COLUMNS.PASSCOUNT.getColumnAliasName()));
			obj.setFailcount(rs.getInt(COLUMNS.FAILCOUNT.getColumnAliasName()));
			obj.setHangcount(rs.getInt(COLUMNS.HANGCOUNT.getColumnAliasName()));
			obj.setLocalConf(rs.getString(COLUMNS.LOCAL_CONF.getColumnAliasName()));
			obj.setHydraTestsuiteId(rs.getInt(COLUMNS.HYDRA_TESTSUITE_ID.getColumnAliasName()));
			obj.setHydraRunId(rs.getInt(COLUMNS.HYDRA_RUN_ID.getColumnAliasName()));
			obj.setHostId(rs.getInt(COLUMNS.HOST_ID.getColumnAliasName()));
			obj.setComment(rs.getString(COLUMNS.COMMENT.getColumnAliasName()));
			obj.setArtifactLocation(rs.getString(COLUMNS.ARTIFACT_LOCATION.getColumnAliasName()));
//	saj		if (this.loadAllFKeys || this.loadHost)
//				obj.setHost(HostDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
//			if (this.loadAllFKeys || this.loadHydraRun)
//				obj.setHydraRun(HydraRunDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
//			if (this.loadAllFKeys || this.loadHydraTestsuite)
//				obj.setHydraTestsuite(HydraTestsuiteDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}