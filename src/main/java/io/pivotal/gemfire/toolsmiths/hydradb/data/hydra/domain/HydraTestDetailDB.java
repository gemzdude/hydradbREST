package io.pivotal.gemfire.toolsmiths.hydradb.data.hydra.domain;

import io.pivotal.gemfire.toolsmiths.hydradb.data.RowUnmapper;
import io.pivotal.gemfire.toolsmiths.hydradb.data.hydra.HydraTestDetail;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This class is generated by Spring Data Jdbc code generator.
 *
 * @author Spring Data Jdbc Code Generator
 */
public class HydraTestDetailDB
{

	private static String TABLE_NAME = "HYDRA_TEST_DETAIL";

	private static String TABLE_ALIAS = "htd";

	public static String getTableName()
	{
		return TABLE_NAME;
	}

	public static String getTableAlias()
	{
		return TABLE_NAME + " as " + TABLE_ALIAS;
	}

	public static String getAlias()
	{
		return TABLE_ALIAS;
	}

	public static String selectAllColumns(boolean ... useAlias)
	{
		return (useAlias[0] ? TABLE_ALIAS : TABLE_NAME) + ".*";
	}

	public enum COLUMNS
	{
		ID("id"),
		ELAPSED_TIME("elapsed_time"),
		DISK_USAGE("disk_usage"),
		STATUS("status"),
		ERROR("error"),
		BUG_NUMBER("bug_number"),
		HYDRA_TEST_ID("hydra_test_id"),
		HYDRA_TESTSUITE_DETAIL_ID("hydra_testsuite_detail_id"),
		HYDRA_RUN_ID("hydra_run_id"),
		COMMENT("comment"),
		TAGS("tags"),
		;

		private String columnName;

		private COLUMNS (String columnName)
		{
			this.columnName = columnName;
		}

		public void setColumnName (String columnName)
		{
			this.columnName = columnName;
		}

		public String getColumnName ()
		{
			return this.columnName;
		}

		public String getColumnAlias ()
		{
			return TABLE_ALIAS + "." + this.columnName;
		}

		public String getColumnAliasAsName ()
		{
			return TABLE_ALIAS  + "." + this.columnName + " as " + TABLE_ALIAS + "_" + this.columnName;
		}

		public String getColumnAliasName ()
		{
			return TABLE_ALIAS + "_" + this.columnName;
		}

	}

	public HydraTestDetailDB ()
	{

	}

	public static final RowMapper<HydraTestDetail> ROW_MAPPER = new HydraTestDetailRowMapper ();
	public static final class  HydraTestDetailRowMapper implements RowMapper<HydraTestDetail>
	{
		public HydraTestDetail mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			HydraTestDetail obj = new HydraTestDetail();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnName()));
			obj.setElapsedTime(rs.getString(COLUMNS.ELAPSED_TIME.getColumnName()));
			obj.setDiskUsage(rs.getString(COLUMNS.DISK_USAGE.getColumnName()));
			obj.setStatus(rs.getString(COLUMNS.STATUS.getColumnName()));
			obj.setError(rs.getString(COLUMNS.ERROR.getColumnName()));
			obj.setBugNumber(rs.getString(COLUMNS.BUG_NUMBER.getColumnName()));
			obj.setHydraTestId(rs.getInt(COLUMNS.HYDRA_TEST_ID.getColumnName()));
			obj.setHydraTestsuiteDetailId(rs.getInt(COLUMNS.HYDRA_TESTSUITE_DETAIL_ID.getColumnName()));
			obj.setHydraRunId(rs.getInt(COLUMNS.HYDRA_RUN_ID.getColumnName()));
			obj.setComment(rs.getString(COLUMNS.COMMENT.getColumnName()));
			obj.setTags(rs.getString(COLUMNS.TAGS.getColumnName()));
			return obj;
		}
	}

	public static final RowUnmapper<HydraTestDetail> ROW_UNMAPPER = new HydraTestDetailRowUnmapper ();
	public static final class HydraTestDetailRowUnmapper implements RowUnmapper<HydraTestDetail>
	{
		public Map<String, Object> mapColumns(HydraTestDetail hydratestdetail)
		{
			Map<String, Object> mapping = new LinkedHashMap<String, Object>();
			mapping.put(COLUMNS.ID.getColumnName(), hydratestdetail.getId());
			mapping.put(COLUMNS.ELAPSED_TIME.getColumnName(), hydratestdetail.getElapsedTime());
			mapping.put(COLUMNS.DISK_USAGE.getColumnName(), hydratestdetail.getDiskUsage());
			mapping.put(COLUMNS.STATUS.getColumnName(), hydratestdetail.getStatus());
			mapping.put(COLUMNS.ERROR.getColumnName(), hydratestdetail.getError());
			mapping.put(COLUMNS.BUG_NUMBER.getColumnName(), hydratestdetail.getBugNumber());
			mapping.put(COLUMNS.HYDRA_TEST_ID.getColumnName(), hydratestdetail.getHydraTestId());
			mapping.put(COLUMNS.HYDRA_TESTSUITE_DETAIL_ID.getColumnName(), hydratestdetail.getHydraTestsuiteDetailId());
			mapping.put(COLUMNS.HYDRA_RUN_ID.getColumnName(), hydratestdetail.getHydraRunId());
			mapping.put(COLUMNS.COMMENT.getColumnName(), hydratestdetail.getComment());
			mapping.put(COLUMNS.TAGS.getColumnName(), hydratestdetail.getTags());
			return mapping;
		}
	}

	public static final RowMapper<HydraTestDetail> ALIAS_ROW_MAPPER = new HydraTestDetailAliasRowMapper ();
	public static final class  HydraTestDetailAliasRowMapper implements RowMapper<HydraTestDetail>
	{
		private boolean loadAllFKeys = false;
		public void setLoadAllFKeys (boolean loadAllFKeys)
		{
			this.loadAllFKeys = loadAllFKeys;
		}

		private boolean loadHydraRun = false;
		public void setLoadHydraRun (boolean loadHydraRun)
		{
			this.loadHydraRun = loadHydraRun;
		}

		private boolean loadHydraTest = false;
		public void setLoadHydraTest (boolean loadHydraTest)
		{
			this.loadHydraTest = loadHydraTest;
		}

		private boolean loadHydraTestsuiteDetail = false;
		public void setLoadHydraTestsuiteDetail (boolean loadHydraTestsuiteDetail)
		{
			this.loadHydraTestsuiteDetail = loadHydraTestsuiteDetail;
		}

		public HydraTestDetail mapRow(ResultSet rs, int rowNum) throws SQLException 
		{
			HydraTestDetail obj = new HydraTestDetail();
			obj.setId(rs.getInt(COLUMNS.ID.getColumnAliasName()));
			obj.setElapsedTime(rs.getString(COLUMNS.ELAPSED_TIME.getColumnAliasName()));
			obj.setDiskUsage(rs.getString(COLUMNS.DISK_USAGE.getColumnAliasName()));
			obj.setStatus(rs.getString(COLUMNS.STATUS.getColumnAliasName()));
			obj.setError(rs.getString(COLUMNS.ERROR.getColumnAliasName()));
			obj.setBugNumber(rs.getString(COLUMNS.BUG_NUMBER.getColumnAliasName()));
			obj.setHydraTestId(rs.getInt(COLUMNS.HYDRA_TEST_ID.getColumnAliasName()));
			obj.setHydraTestsuiteDetailId(rs.getInt(COLUMNS.HYDRA_TESTSUITE_DETAIL_ID.getColumnAliasName()));
			obj.setHydraRunId(rs.getInt(COLUMNS.HYDRA_RUN_ID.getColumnAliasName()));
			obj.setComment(rs.getString(COLUMNS.COMMENT.getColumnAliasName()));
			obj.setTags(rs.getString(COLUMNS.TAGS.getColumnAliasName()));
			if (this.loadAllFKeys || this.loadHydraRun)
				obj.setHydraRun(HydraRunDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
			if (this.loadAllFKeys || this.loadHydraTest)
				obj.setHydraTest(HydraTestDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
			if (this.loadAllFKeys || this.loadHydraTestsuiteDetail)
				obj.setHydraTestsuiteDetail(HydraTestsuiteDetailDB.ALIAS_ROW_MAPPER.mapRow(rs, rowNum));
			return obj;
		}
	}

	public static StringBuffer getAllColumnAliases ()
	{
		StringBuffer strBuf = new StringBuffer ();
		int i = COLUMNS.values ().length;
		for (COLUMNS c : COLUMNS.values ())
		{
			strBuf.append (c.getColumnAliasAsName ());
			if (--i > 0)
				strBuf.append (", ");
		}
		return strBuf;
	}

	/* START Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

	/* END Do not remove/edit this line. CodeGenerator will preserve any code between start and end tags.*/

}